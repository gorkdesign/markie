/////////////////////
// Mixins

/// Mixin - Fluid Type.
/// PRECISE CONTROL OVER RESPONSIVE TYPOGRAPHY FOR SASS
/// Indrek Paas @indrekpaas
/// Inspired by Mike Riethmuller's Precise control over responsive typography
/// @link http://madebymike.com.au/writing/precise-control-responsive-typography/
/// @param $properties
/// @param $min-vw
/// @param $max-vw
/// @param $min-value
/// @param $max-value
@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  & {
    @each $property in $properties {
      #{$property}: $min-value;
    }

    @media screen and (min-width: $min-vw) {
      @each $property in $properties {
        #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
      }
    }

    @media screen and (min-width: $max-vw) {
      @each $property in $properties {
        #{$property}: $max-value;
      }
    }
  }
}

/// Mixin - Strip unit
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

/// Mixin - Center.
/// Center an element vertically or horizontally in its container,
/// and optionally horizontally. Option to undo.
/// @param $horizonally-center - center horizontally
/// @param $vertically-center - center vertically
/// @param $absolute-positioning - position absolutely, rather than relatively
/// @param $undo - undo vertical centering on an element it was previously applied to
@mixin center($horizontally: true, $vertically: true, $absolute: false, $undo: false) {
  display: inline-block;
  @if ($absolute) {
    position: absolute;
  } @else {
    position: relative;
  }
  @if ($horizontally == true and $vertically == true) {
    top: 50%;
    left: 50%;
    transform: translateX(-50%) translateY(-50%);
  }

  @if ($vertically == true and $horizontally == false) {
    top: 50%;
    transform: translateY(-50%);
  }

  @if ($horizontally == true and $vertically == false) {
    left: 50%;
    transform: translateX(-50%);
  }

  @if ($undo) {
    position: static;
    left: auto;
    transform: none;
  }
}

/// Mixin - Font-Size.
/// Adds px value for fallback - then rem value
/// use example =   @include font-size(1.6); = 1.6rem / 16px

@mixin font-size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

/// Mixin - Clearfix.
/// Adds clearfix based on http://bourbon.io/docs/#clearfix
/// use example =   @include cleafix

@mixin clearfix {
  &::after {
    display: table;
    clear: both;
    content: "";
  }
}

/// Mixin - list-reset
/// Reset list item defaults when no margin, padding, list styles needed

@mixin list-reset {
  margin: 0;
  padding: 0;
  list-style: none;
}

/// Mixin - With Icon
/// Precede Text with SVG icon
@mixin with-icon {
  display: inline-block;
  margin-right: 0.1em;
  padding: 0.8em;
  content: "";
  background-size: cover;
}

/// Mixin - Outer container
/// Outer container mixin for large screens
@mixin outer-container {
  @include clearfix;
  max-width: 68.5em;
  margin: 0 auto;
}

/// Mixin - More Link
/// Used in a number of views
@mixin more-link {
  a {
    @include font-size(0.9);
    text-decoration: none;
    font-weight: 600;

    &::before {
      margin-right: 0.2em;
      content: "»";
      font-size: 1.2rem;
    }
  }
}

/// Mixin - Back Link
/// Used in a number of views
@mixin back-link {
  @include font-size(0.9);
  display: block;
  text-decoration: none;
  font-weight: 600;

  &::before {
    margin-right: 0.2em;
    content: "«";
    font-size: 1.2rem;
  }
}

/// Mixin - Flexbox Layout
/// Gives us a default flexbox layout with 1rem spacing between items.
/// This is handy if we only want flexbox on medium/large breakpoints.
///
/// Example usage:
/// .view-content {
///   @include flex-default
/// }
@mixin flex-default {
  display: flex;
  flex-wrap: wrap;
  margin-right: -1rem;
  margin-left: -1rem;
  > * {
    margin-right: 1rem;
    margin-left: 1rem;
  }
}

.flex-default {
  @include flex-default;
}

@mixin animated_link($colour) {
  position: relative;
  @include breakpoint($bp--xlarge) {
    &::after {
      position: absolute;
      left: 50%;
      width: 0;
      height: 2px;
      margin-top: 2rem;
      content: "";
      transition: 0.3s;
      transition-timing-function: cubic-bezier(1, -0.65, 0, 2.31);
      transform: translateX(-50%);
      background: $colour;
    }
    &:hover,
    &:focus {
      top: -2px;
      text-decoration: none;
      outline: none;
      &:after {
        width: calc(100% - 1.5rem);
      }
    }
  }
}
